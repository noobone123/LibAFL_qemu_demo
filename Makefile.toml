[env]
PROFILE = { value = "release", condition = { env_not_set = ["PROFILE"] } }
PROFILE_DIR = { source = "${PROFILE}", default_value = "release", mapping = { "release" = "release", "dev" = "debug" }, condition = { env_not_set = [
  "PROFILE_DIR",
] } }
CROSS_CC = "x86_64-linux-gnu-gcc"
CROSS_CXX = "x86_64-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/x86_64"
LIBPNG_ARCH = "x86_64"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "x86_64"
#LIBAFL_DEBUG_OUTPUT = "1"
#CUSTOM_QEMU_DIR= "~/qemu-libafl-bridge"

[env.arm]
CROSS_CC = "arm-linux-gnueabi-gcc"
CROSS_CXX = "arm-linux-gnueabi-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/arm"
LIBPNG_ARCH = "arm"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "arm"

[env.aarch64]
CROSS_CC = "aarch64-linux-gnu-gcc"
CROSS_CXX = "aarch64-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/aarch64"
LIBPNG_ARCH = "aarch64"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "aarch64"

[env.x86_64]
CROSS_CC = "x86_64-linux-gnu-gcc"
CROSS_CXX = "x86_64-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/x86_64"
LIBPNG_ARCH = "x86_64"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "x86_64"

[env.i386]
CROSS_CC = "x86_64-linux-gnu-gcc"
CROSS_CXX = "x86_64-linux-gnu-g++"
CROSS_CFLAGS = "-m32"
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/i386"
LIBPNG_ARCH = "i386"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "i386"

[env.mips]
CROSS_CC = "mipsel-linux-gnu-gcc"
CROSS_CXX = "mipsel-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/mips"
LIBPNG_ARCH = "mips"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "mips"

[env.ppc]
CROSS_CC = "powerpc-linux-gnu-gcc"
CROSS_CXX = "powerpc-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/ppc"
LIBPNG_ARCH = "ppc"
LIBPNG_OPTIMIZATIONS = "no"
FEATURE = "ppc"

[tasks.arch_target_dir]
script_runner = "@shell"
script = '''
mkdir -p ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}
mkdir -p ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/deps/
mkdir -p ${TARGET_DIR}
'''

[tasks.download-tiff]
script_runner = "@shell"
script = '''
if [ ! -d "tiff" ]; then
  echo "Current Working directory: ${CARGO_MAKE_WORKING_DIRECTORY}"
  wget http://download.osgeo.org/libtiff/tiff-4.0.6.tar.gz -O ${CARGO_MAKE_WORKING_DIRECTORY}/tiff-4.0.6.tar.gz
  tar xf tiff-4.0.6.tar.gz
  mv tiff-4.0.6 tiff
  rm tiff-4.0.6.tar.gz
  mkdir -p ${TARGET_DIR}/build-tiff
fi
'''

[tasks.configure-tiff]
cwd = "tiff"
script = '''
if [ ! -f "${TARGET_DIR}/build-tiff/lib/libtiff.a" ]; then
  ./configure --prefix="${TARGET_DIR}/build-tiff/" --target aarch64-unknown-linux-gnu --disable-cxx --host x86_64-unknown-linux-gnu CC=aarch64-linux-gnu-gcc
fi
'''

[tasks.build-tiff]
cwd = "tiff"
script = '''
if [ ! -f "${TARGET_DIR}/build-tiff/lib/libtiff.a" ]; then
  make && make install
fi
'''

[tasks.clean-tiff]
script_runner = "@shell"
script = '''
rm -rf tiff
'''

[tasks.clean]
dependencies = ["clean-tiff"]
# Disable default `clean` definition
clear = true
script_runner = "@shell"
script = '''
rm -rf ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}
cargo clean
'''

[tasks.build]
# Be careful: if no command and args are specified, 
# the task will execute the default `cargo build` command automatically
dependencies = ["arch_target_dir", 
                "download-tiff", 
                "configure-tiff", 
                "build-tiff"]
command = "cargo"
args = [
  "build",
  "--profile",
  "${PROFILE}",
  "--features",
  "${FEATURE}",
  "--target-dir",
  "${TARGET_DIR}",
]


[tasks.arm]
command = "cargo"
args = ["make", "-p", "arm", "run"]

[tasks.aarch64]
command = "cargo"
args = ["make", "-p", "aarch64", "build"]

[tasks.x86_64]
command = "cargo"
args = ["make", "-p", "x86_64", "run"]

[tasks.i386]
command = "cargo"
args = ["make", "-p", "i386", "run"]

[tasks.mips]
command = "cargo"
args = ["make", "-p", "mips", "run"]

[tasks.ppc]
command = "cargo"
args = ["make", "-p", "ppc", "run"]

[tasks.all]
dependencies = ["arm", "aarch64", "x86_64", "i386", "mips", "ppc"]
